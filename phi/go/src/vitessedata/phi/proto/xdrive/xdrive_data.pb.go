// Code generated by protoc-gen-go.
// source: xdrive_data.proto
// DO NOT EDIT!

/*
Package xdrive is a generated protocol buffer package.

It is generated from these files:
	xdrive_data.proto

It has these top-level messages:
	ColumnDesc
	Filter
	CSVSpec
	FileSpec
	StringList
	KeyValue
	KeyValueList
	RmgrInfo
	ReadRequest
	SampleRequest
	DataReply
	XCol
	XRowSet
	PluginDataReply
	SizeMetaRequest
	SizeMetaReply
	PluginSizeMetaReply
	PageData
	WriteRequest
	PluginWriteRequest
	WriteReply
	PluginWriteReply
	XMsg
*/
package xdrive

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SpqType int32

const (
	SpqType_UNKNOWN SpqType = 0
	SpqType_BOOL    SpqType = 1
	SpqType_INT16   SpqType = 2
	SpqType_INT32   SpqType = 3
	SpqType_INT64   SpqType = 4
	SpqType_INT128  SpqType = 5
	SpqType_FLOAT   SpqType = 6
	SpqType_DOUBLE  SpqType = 7
	// BYTEA    = 0x0008;   not supported.
	SpqType_CSTR             SpqType = 9
	SpqType_DEC64            SpqType = 10
	SpqType_DEC128           SpqType = 11
	SpqType_DATE             SpqType = 65539
	SpqType_TIME_MILLIS      SpqType = 131075
	SpqType_TIMESTAMP_MILLIS SpqType = 196612
	SpqType_TIME_MICROS      SpqType = 262148
	SpqType_TIMESTAMP_MICROS SpqType = 327684
	SpqType_JSON             SpqType = 393225
)

var SpqType_name = map[int32]string{
	0:      "UNKNOWN",
	1:      "BOOL",
	2:      "INT16",
	3:      "INT32",
	4:      "INT64",
	5:      "INT128",
	6:      "FLOAT",
	7:      "DOUBLE",
	9:      "CSTR",
	10:     "DEC64",
	11:     "DEC128",
	65539:  "DATE",
	131075: "TIME_MILLIS",
	196612: "TIMESTAMP_MILLIS",
	262148: "TIME_MICROS",
	327684: "TIMESTAMP_MICROS",
	393225: "JSON",
}
var SpqType_value = map[string]int32{
	"UNKNOWN":          0,
	"BOOL":             1,
	"INT16":            2,
	"INT32":            3,
	"INT64":            4,
	"INT128":           5,
	"FLOAT":            6,
	"DOUBLE":           7,
	"CSTR":             9,
	"DEC64":            10,
	"DEC128":           11,
	"DATE":             65539,
	"TIME_MILLIS":      131075,
	"TIMESTAMP_MILLIS": 196612,
	"TIME_MICROS":      262148,
	"TIMESTAMP_MICROS": 327684,
	"JSON":             393225,
}

func (x SpqType) String() string {
	return proto.EnumName(SpqType_name, int32(x))
}
func (SpqType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type XMsg_XMsgFlag int32

const (
	XMsg_EOS      XMsg_XMsgFlag = 0
	XMsg_EOB      XMsg_XMsgFlag = 1
	XMsg_CONTINUE XMsg_XMsgFlag = 2
	XMsg_SYNC     XMsg_XMsgFlag = 1000
)

var XMsg_XMsgFlag_name = map[int32]string{
	0:    "EOS",
	1:    "EOB",
	2:    "CONTINUE",
	1000: "SYNC",
}
var XMsg_XMsgFlag_value = map[string]int32{
	"EOS":      0,
	"EOB":      1,
	"CONTINUE": 2,
	"SYNC":     1000,
}

func (x XMsg_XMsgFlag) String() string {
	return proto.EnumName(XMsg_XMsgFlag_name, int32(x))
}
func (XMsg_XMsgFlag) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{22, 0} }

type ColumnDesc struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type int32  `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
}

func (m *ColumnDesc) Reset()                    { *m = ColumnDesc{} }
func (m *ColumnDesc) String() string            { return proto.CompactTextString(m) }
func (*ColumnDesc) ProtoMessage()               {}
func (*ColumnDesc) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ColumnDesc) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ColumnDesc) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type Filter struct {
	Op     string   `protobuf:"bytes,1,opt,name=op" json:"op,omitempty"`
	Column string   `protobuf:"bytes,2,opt,name=column" json:"column,omitempty"`
	Args   []string `protobuf:"bytes,3,rep,name=args" json:"args,omitempty"`
}

func (m *Filter) Reset()                    { *m = Filter{} }
func (m *Filter) String() string            { return proto.CompactTextString(m) }
func (*Filter) ProtoMessage()               {}
func (*Filter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Filter) GetOp() string {
	if m != nil {
		return m.Op
	}
	return ""
}

func (m *Filter) GetColumn() string {
	if m != nil {
		return m.Column
	}
	return ""
}

func (m *Filter) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

type CSVSpec struct {
	Delimiter string `protobuf:"bytes,1,opt,name=delimiter" json:"delimiter,omitempty"`
	Nullstr   string `protobuf:"bytes,2,opt,name=nullstr" json:"nullstr,omitempty"`
	Header    bool   `protobuf:"varint,3,opt,name=header" json:"header,omitempty"`
	Quote     string `protobuf:"bytes,4,opt,name=quote" json:"quote,omitempty"`
	Escape    string `protobuf:"bytes,5,opt,name=escape" json:"escape,omitempty"`
}

func (m *CSVSpec) Reset()                    { *m = CSVSpec{} }
func (m *CSVSpec) String() string            { return proto.CompactTextString(m) }
func (*CSVSpec) ProtoMessage()               {}
func (*CSVSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CSVSpec) GetDelimiter() string {
	if m != nil {
		return m.Delimiter
	}
	return ""
}

func (m *CSVSpec) GetNullstr() string {
	if m != nil {
		return m.Nullstr
	}
	return ""
}

func (m *CSVSpec) GetHeader() bool {
	if m != nil {
		return m.Header
	}
	return false
}

func (m *CSVSpec) GetQuote() string {
	if m != nil {
		return m.Quote
	}
	return ""
}

func (m *CSVSpec) GetEscape() string {
	if m != nil {
		return m.Escape
	}
	return ""
}

type FileSpec struct {
	Path    string   `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Format  string   `protobuf:"bytes,2,opt,name=format" json:"format,omitempty"`
	Csvspec *CSVSpec `protobuf:"bytes,3,opt,name=csvspec" json:"csvspec,omitempty"`
}

func (m *FileSpec) Reset()                    { *m = FileSpec{} }
func (m *FileSpec) String() string            { return proto.CompactTextString(m) }
func (*FileSpec) ProtoMessage()               {}
func (*FileSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *FileSpec) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *FileSpec) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *FileSpec) GetCsvspec() *CSVSpec {
	if m != nil {
		return m.Csvspec
	}
	return nil
}

type StringList struct {
	Str []string `protobuf:"bytes,1,rep,name=str" json:"str,omitempty"`
}

func (m *StringList) Reset()                    { *m = StringList{} }
func (m *StringList) String() string            { return proto.CompactTextString(m) }
func (*StringList) ProtoMessage()               {}
func (*StringList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *StringList) GetStr() []string {
	if m != nil {
		return m.Str
	}
	return nil
}

type KeyValue struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *KeyValue) Reset()                    { *m = KeyValue{} }
func (m *KeyValue) String() string            { return proto.CompactTextString(m) }
func (*KeyValue) ProtoMessage()               {}
func (*KeyValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *KeyValue) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KeyValue) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type KeyValueList struct {
	Kv []*KeyValue `protobuf:"bytes,1,rep,name=kv" json:"kv,omitempty"`
}

func (m *KeyValueList) Reset()                    { *m = KeyValueList{} }
func (m *KeyValueList) String() string            { return proto.CompactTextString(m) }
func (*KeyValueList) ProtoMessage()               {}
func (*KeyValueList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *KeyValueList) GetKv() []*KeyValue {
	if m != nil {
		return m.Kv
	}
	return nil
}

type RmgrInfo struct {
	Scheme   string        `protobuf:"bytes,1,opt,name=scheme" json:"scheme,omitempty"`
	Format   string        `protobuf:"bytes,2,opt,name=format" json:"format,omitempty"`
	Rpath    string        `protobuf:"bytes,3,opt,name=rpath" json:"rpath,omitempty"`
	Conf     *KeyValueList `protobuf:"bytes,4,opt,name=conf" json:"conf,omitempty"`
	Pluginop string        `protobuf:"bytes,5,opt,name=pluginop" json:"pluginop,omitempty"`
}

func (m *RmgrInfo) Reset()                    { *m = RmgrInfo{} }
func (m *RmgrInfo) String() string            { return proto.CompactTextString(m) }
func (*RmgrInfo) ProtoMessage()               {}
func (*RmgrInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *RmgrInfo) GetScheme() string {
	if m != nil {
		return m.Scheme
	}
	return ""
}

func (m *RmgrInfo) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *RmgrInfo) GetRpath() string {
	if m != nil {
		return m.Rpath
	}
	return ""
}

func (m *RmgrInfo) GetConf() *KeyValueList {
	if m != nil {
		return m.Conf
	}
	return nil
}

func (m *RmgrInfo) GetPluginop() string {
	if m != nil {
		return m.Pluginop
	}
	return ""
}

type ReadRequest struct {
	// Which file(s)
	Filespec *FileSpec `protobuf:"bytes,1,opt,name=filespec" json:"filespec,omitempty"`
	// Table Schema
	Columndesc []*ColumnDesc `protobuf:"bytes,2,rep,name=columndesc" json:"columndesc,omitempty"`
	// Names of required columns
	Columnlist []string `protobuf:"bytes,3,rep,name=columnlist" json:"columnlist,omitempty"`
	// Filters
	Filter []*Filter `protobuf:"bytes,4,rep,name=filter" json:"filter,omitempty"`
	// Fragment
	FragId  int32 `protobuf:"varint,5,opt,name=frag_id,json=fragId" json:"frag_id,omitempty"`
	FragCnt int32 `protobuf:"varint,6,opt,name=frag_cnt,json=fragCnt" json:"frag_cnt,omitempty"`
}

func (m *ReadRequest) Reset()                    { *m = ReadRequest{} }
func (m *ReadRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadRequest) ProtoMessage()               {}
func (*ReadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ReadRequest) GetFilespec() *FileSpec {
	if m != nil {
		return m.Filespec
	}
	return nil
}

func (m *ReadRequest) GetColumndesc() []*ColumnDesc {
	if m != nil {
		return m.Columndesc
	}
	return nil
}

func (m *ReadRequest) GetColumnlist() []string {
	if m != nil {
		return m.Columnlist
	}
	return nil
}

func (m *ReadRequest) GetFilter() []*Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ReadRequest) GetFragId() int32 {
	if m != nil {
		return m.FragId
	}
	return 0
}

func (m *ReadRequest) GetFragCnt() int32 {
	if m != nil {
		return m.FragCnt
	}
	return 0
}

type SampleRequest struct {
	// Which file(s)
	Filespec *FileSpec `protobuf:"bytes,1,opt,name=filespec" json:"filespec,omitempty"`
	// Table Schema
	Columndesc []*ColumnDesc `protobuf:"bytes,2,rep,name=columndesc" json:"columndesc,omitempty"`
	// Fragment
	FragId  int32 `protobuf:"varint,3,opt,name=frag_id,json=fragId" json:"frag_id,omitempty"`
	FragCnt int32 `protobuf:"varint,4,opt,name=frag_cnt,json=fragCnt" json:"frag_cnt,omitempty"`
	// Sample size
	Nrow int32 `protobuf:"varint,5,opt,name=nrow" json:"nrow,omitempty"`
}

func (m *SampleRequest) Reset()                    { *m = SampleRequest{} }
func (m *SampleRequest) String() string            { return proto.CompactTextString(m) }
func (*SampleRequest) ProtoMessage()               {}
func (*SampleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *SampleRequest) GetFilespec() *FileSpec {
	if m != nil {
		return m.Filespec
	}
	return nil
}

func (m *SampleRequest) GetColumndesc() []*ColumnDesc {
	if m != nil {
		return m.Columndesc
	}
	return nil
}

func (m *SampleRequest) GetFragId() int32 {
	if m != nil {
		return m.FragId
	}
	return 0
}

func (m *SampleRequest) GetFragCnt() int32 {
	if m != nil {
		return m.FragCnt
	}
	return 0
}

func (m *SampleRequest) GetNrow() int32 {
	if m != nil {
		return m.Nrow
	}
	return 0
}

type DataReply struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *DataReply) Reset()                    { *m = DataReply{} }
func (m *DataReply) String() string            { return proto.CompactTextString(m) }
func (*DataReply) ProtoMessage()               {}
func (*DataReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *DataReply) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type XCol struct {
	Colname string    `protobuf:"bytes,1,opt,name=colname" json:"colname,omitempty"`
	Nrow    int32     `protobuf:"varint,2,opt,name=nrow" json:"nrow,omitempty"`
	Nullmap []bool    `protobuf:"varint,3,rep,packed,name=nullmap" json:"nullmap,omitempty"`
	Sdata   []string  `protobuf:"bytes,4,rep,name=sdata" json:"sdata,omitempty"`
	I32Data []int32   `protobuf:"varint,5,rep,packed,name=i32data" json:"i32data,omitempty"`
	I64Data []int64   `protobuf:"varint,6,rep,packed,name=i64data" json:"i64data,omitempty"`
	F32Data []float32 `protobuf:"fixed32,7,rep,packed,name=f32data" json:"f32data,omitempty"`
	F64Data []float64 `protobuf:"fixed64,8,rep,packed,name=f64data" json:"f64data,omitempty"`
}

func (m *XCol) Reset()                    { *m = XCol{} }
func (m *XCol) String() string            { return proto.CompactTextString(m) }
func (*XCol) ProtoMessage()               {}
func (*XCol) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *XCol) GetColname() string {
	if m != nil {
		return m.Colname
	}
	return ""
}

func (m *XCol) GetNrow() int32 {
	if m != nil {
		return m.Nrow
	}
	return 0
}

func (m *XCol) GetNullmap() []bool {
	if m != nil {
		return m.Nullmap
	}
	return nil
}

func (m *XCol) GetSdata() []string {
	if m != nil {
		return m.Sdata
	}
	return nil
}

func (m *XCol) GetI32Data() []int32 {
	if m != nil {
		return m.I32Data
	}
	return nil
}

func (m *XCol) GetI64Data() []int64 {
	if m != nil {
		return m.I64Data
	}
	return nil
}

func (m *XCol) GetF32Data() []float32 {
	if m != nil {
		return m.F32Data
	}
	return nil
}

func (m *XCol) GetF64Data() []float64 {
	if m != nil {
		return m.F64Data
	}
	return nil
}

type XRowSet struct {
	Tag     int32   `protobuf:"varint,1,opt,name=tag" json:"tag,omitempty"`
	Round   int32   `protobuf:"varint,2,opt,name=round" json:"round,omitempty"`
	Columns []*XCol `protobuf:"bytes,3,rep,name=columns" json:"columns,omitempty"`
}

func (m *XRowSet) Reset()                    { *m = XRowSet{} }
func (m *XRowSet) String() string            { return proto.CompactTextString(m) }
func (*XRowSet) ProtoMessage()               {}
func (*XRowSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *XRowSet) GetTag() int32 {
	if m != nil {
		return m.Tag
	}
	return 0
}

func (m *XRowSet) GetRound() int32 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *XRowSet) GetColumns() []*XCol {
	if m != nil {
		return m.Columns
	}
	return nil
}

type PluginDataReply struct {
	Errcode int32    `protobuf:"varint,1,opt,name=errcode" json:"errcode,omitempty"`
	Errmsg  string   `protobuf:"bytes,2,opt,name=errmsg" json:"errmsg,omitempty"`
	Rowset  *XRowSet `protobuf:"bytes,3,opt,name=rowset" json:"rowset,omitempty"`
}

func (m *PluginDataReply) Reset()                    { *m = PluginDataReply{} }
func (m *PluginDataReply) String() string            { return proto.CompactTextString(m) }
func (*PluginDataReply) ProtoMessage()               {}
func (*PluginDataReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *PluginDataReply) GetErrcode() int32 {
	if m != nil {
		return m.Errcode
	}
	return 0
}

func (m *PluginDataReply) GetErrmsg() string {
	if m != nil {
		return m.Errmsg
	}
	return ""
}

func (m *PluginDataReply) GetRowset() *XRowSet {
	if m != nil {
		return m.Rowset
	}
	return nil
}

type SizeMetaRequest struct {
	// Which file(s)
	Filespec *FileSpec `protobuf:"bytes,1,opt,name=filespec" json:"filespec,omitempty"`
	// Table Schema
	Columndesc []*ColumnDesc `protobuf:"bytes,2,rep,name=columndesc" json:"columndesc,omitempty"`
	// Fragment
	FragId  int32 `protobuf:"varint,3,opt,name=frag_id,json=fragId" json:"frag_id,omitempty"`
	FragCnt int32 `protobuf:"varint,4,opt,name=frag_cnt,json=fragCnt" json:"frag_cnt,omitempty"`
}

func (m *SizeMetaRequest) Reset()                    { *m = SizeMetaRequest{} }
func (m *SizeMetaRequest) String() string            { return proto.CompactTextString(m) }
func (*SizeMetaRequest) ProtoMessage()               {}
func (*SizeMetaRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *SizeMetaRequest) GetFilespec() *FileSpec {
	if m != nil {
		return m.Filespec
	}
	return nil
}

func (m *SizeMetaRequest) GetColumndesc() []*ColumnDesc {
	if m != nil {
		return m.Columndesc
	}
	return nil
}

func (m *SizeMetaRequest) GetFragId() int32 {
	if m != nil {
		return m.FragId
	}
	return 0
}

func (m *SizeMetaRequest) GetFragCnt() int32 {
	if m != nil {
		return m.FragCnt
	}
	return 0
}

type SizeMetaReply struct {
	Nrow  int64 `protobuf:"varint,1,opt,name=nrow" json:"nrow,omitempty"`
	Nbyte int64 `protobuf:"varint,2,opt,name=nbyte" json:"nbyte,omitempty"`
}

func (m *SizeMetaReply) Reset()                    { *m = SizeMetaReply{} }
func (m *SizeMetaReply) String() string            { return proto.CompactTextString(m) }
func (*SizeMetaReply) ProtoMessage()               {}
func (*SizeMetaReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *SizeMetaReply) GetNrow() int64 {
	if m != nil {
		return m.Nrow
	}
	return 0
}

func (m *SizeMetaReply) GetNbyte() int64 {
	if m != nil {
		return m.Nbyte
	}
	return 0
}

type PluginSizeMetaReply struct {
	Errcode  int32          `protobuf:"varint,1,opt,name=errcode" json:"errcode,omitempty"`
	Errmsg   string         `protobuf:"bytes,2,opt,name=errmsg" json:"errmsg,omitempty"`
	Sizemeta *SizeMetaReply `protobuf:"bytes,3,opt,name=sizemeta" json:"sizemeta,omitempty"`
}

func (m *PluginSizeMetaReply) Reset()                    { *m = PluginSizeMetaReply{} }
func (m *PluginSizeMetaReply) String() string            { return proto.CompactTextString(m) }
func (*PluginSizeMetaReply) ProtoMessage()               {}
func (*PluginSizeMetaReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *PluginSizeMetaReply) GetErrcode() int32 {
	if m != nil {
		return m.Errcode
	}
	return 0
}

func (m *PluginSizeMetaReply) GetErrmsg() string {
	if m != nil {
		return m.Errmsg
	}
	return ""
}

func (m *PluginSizeMetaReply) GetSizemeta() *SizeMetaReply {
	if m != nil {
		return m.Sizemeta
	}
	return nil
}

type PageData struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *PageData) Reset()                    { *m = PageData{} }
func (m *PageData) String() string            { return proto.CompactTextString(m) }
func (*PageData) ProtoMessage()               {}
func (*PageData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *PageData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type WriteRequest struct {
	Filespec   *FileSpec     `protobuf:"bytes,1,opt,name=filespec" json:"filespec,omitempty"`
	Columndesc []*ColumnDesc `protobuf:"bytes,2,rep,name=columndesc" json:"columndesc,omitempty"`
	Page       []*PageData   `protobuf:"bytes,3,rep,name=page" json:"page,omitempty"`
}

func (m *WriteRequest) Reset()                    { *m = WriteRequest{} }
func (m *WriteRequest) String() string            { return proto.CompactTextString(m) }
func (*WriteRequest) ProtoMessage()               {}
func (*WriteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *WriteRequest) GetFilespec() *FileSpec {
	if m != nil {
		return m.Filespec
	}
	return nil
}

func (m *WriteRequest) GetColumndesc() []*ColumnDesc {
	if m != nil {
		return m.Columndesc
	}
	return nil
}

func (m *WriteRequest) GetPage() []*PageData {
	if m != nil {
		return m.Page
	}
	return nil
}

type PluginWriteRequest struct {
	Filespec   *FileSpec     `protobuf:"bytes,1,opt,name=filespec" json:"filespec,omitempty"`
	Columndesc []*ColumnDesc `protobuf:"bytes,2,rep,name=columndesc" json:"columndesc,omitempty"`
	Rowset     *XRowSet      `protobuf:"bytes,3,opt,name=rowset" json:"rowset,omitempty"`
}

func (m *PluginWriteRequest) Reset()                    { *m = PluginWriteRequest{} }
func (m *PluginWriteRequest) String() string            { return proto.CompactTextString(m) }
func (*PluginWriteRequest) ProtoMessage()               {}
func (*PluginWriteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *PluginWriteRequest) GetFilespec() *FileSpec {
	if m != nil {
		return m.Filespec
	}
	return nil
}

func (m *PluginWriteRequest) GetColumndesc() []*ColumnDesc {
	if m != nil {
		return m.Columndesc
	}
	return nil
}

func (m *PluginWriteRequest) GetRowset() *XRowSet {
	if m != nil {
		return m.Rowset
	}
	return nil
}

type WriteReply struct {
}

func (m *WriteReply) Reset()                    { *m = WriteReply{} }
func (m *WriteReply) String() string            { return proto.CompactTextString(m) }
func (*WriteReply) ProtoMessage()               {}
func (*WriteReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

type PluginWriteReply struct {
	Errcode int32  `protobuf:"varint,1,opt,name=errcode" json:"errcode,omitempty"`
	Errmsg  string `protobuf:"bytes,2,opt,name=errmsg" json:"errmsg,omitempty"`
}

func (m *PluginWriteReply) Reset()                    { *m = PluginWriteReply{} }
func (m *PluginWriteReply) String() string            { return proto.CompactTextString(m) }
func (*PluginWriteReply) ProtoMessage()               {}
func (*PluginWriteReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *PluginWriteReply) GetErrcode() int32 {
	if m != nil {
		return m.Errcode
	}
	return 0
}

func (m *PluginWriteReply) GetErrmsg() string {
	if m != nil {
		return m.Errmsg
	}
	return ""
}

type XMsg struct {
	Name   string        `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Xflag  XMsg_XMsgFlag `protobuf:"varint,2,opt,name=xflag,enum=xdrive.XMsg_XMsgFlag" json:"xflag,omitempty"`
	Code   int32         `protobuf:"varint,3,opt,name=code" json:"code,omitempty"`
	Info   string        `protobuf:"bytes,4,opt,name=info" json:"info,omitempty"`
	Rowset *XRowSet      `protobuf:"bytes,5,opt,name=rowset" json:"rowset,omitempty"`
}

func (m *XMsg) Reset()                    { *m = XMsg{} }
func (m *XMsg) String() string            { return proto.CompactTextString(m) }
func (*XMsg) ProtoMessage()               {}
func (*XMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *XMsg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *XMsg) GetXflag() XMsg_XMsgFlag {
	if m != nil {
		return m.Xflag
	}
	return XMsg_EOS
}

func (m *XMsg) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *XMsg) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func (m *XMsg) GetRowset() *XRowSet {
	if m != nil {
		return m.Rowset
	}
	return nil
}

func init() {
	proto.RegisterType((*ColumnDesc)(nil), "xdrive.ColumnDesc")
	proto.RegisterType((*Filter)(nil), "xdrive.Filter")
	proto.RegisterType((*CSVSpec)(nil), "xdrive.CSVSpec")
	proto.RegisterType((*FileSpec)(nil), "xdrive.FileSpec")
	proto.RegisterType((*StringList)(nil), "xdrive.StringList")
	proto.RegisterType((*KeyValue)(nil), "xdrive.KeyValue")
	proto.RegisterType((*KeyValueList)(nil), "xdrive.KeyValueList")
	proto.RegisterType((*RmgrInfo)(nil), "xdrive.RmgrInfo")
	proto.RegisterType((*ReadRequest)(nil), "xdrive.ReadRequest")
	proto.RegisterType((*SampleRequest)(nil), "xdrive.SampleRequest")
	proto.RegisterType((*DataReply)(nil), "xdrive.DataReply")
	proto.RegisterType((*XCol)(nil), "xdrive.XCol")
	proto.RegisterType((*XRowSet)(nil), "xdrive.XRowSet")
	proto.RegisterType((*PluginDataReply)(nil), "xdrive.PluginDataReply")
	proto.RegisterType((*SizeMetaRequest)(nil), "xdrive.SizeMetaRequest")
	proto.RegisterType((*SizeMetaReply)(nil), "xdrive.SizeMetaReply")
	proto.RegisterType((*PluginSizeMetaReply)(nil), "xdrive.PluginSizeMetaReply")
	proto.RegisterType((*PageData)(nil), "xdrive.PageData")
	proto.RegisterType((*WriteRequest)(nil), "xdrive.WriteRequest")
	proto.RegisterType((*PluginWriteRequest)(nil), "xdrive.PluginWriteRequest")
	proto.RegisterType((*WriteReply)(nil), "xdrive.WriteReply")
	proto.RegisterType((*PluginWriteReply)(nil), "xdrive.PluginWriteReply")
	proto.RegisterType((*XMsg)(nil), "xdrive.XMsg")
	proto.RegisterEnum("xdrive.SpqType", SpqType_name, SpqType_value)
	proto.RegisterEnum("xdrive.XMsg_XMsgFlag", XMsg_XMsgFlag_name, XMsg_XMsgFlag_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Phi service

type PhiClient interface {
	Sendmsg(ctx context.Context, in *XMsg, opts ...grpc.CallOption) (*PluginWriteReply, error)
}

type phiClient struct {
	cc *grpc.ClientConn
}

func NewPhiClient(cc *grpc.ClientConn) PhiClient {
	return &phiClient{cc}
}

func (c *phiClient) Sendmsg(ctx context.Context, in *XMsg, opts ...grpc.CallOption) (*PluginWriteReply, error) {
	out := new(PluginWriteReply)
	err := grpc.Invoke(ctx, "/xdrive.Phi/sendmsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Phi service

type PhiServer interface {
	Sendmsg(context.Context, *XMsg) (*PluginWriteReply, error)
}

func RegisterPhiServer(s *grpc.Server, srv PhiServer) {
	s.RegisterService(&_Phi_serviceDesc, srv)
}

func _Phi_Sendmsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhiServer).Sendmsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xdrive.Phi/Sendmsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhiServer).Sendmsg(ctx, req.(*XMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _Phi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "xdrive.Phi",
	HandlerType: (*PhiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "sendmsg",
			Handler:    _Phi_Sendmsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "xdrive_data.proto",
}

func init() { proto.RegisterFile("xdrive_data.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1164 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xcc, 0x56, 0xcd, 0x6e, 0xdb, 0xc6,
	0x13, 0x37, 0x45, 0x52, 0xa4, 0x46, 0x8a, 0xcd, 0xec, 0xdf, 0xff, 0x94, 0x0d, 0x0a, 0x57, 0x20,
	0x8a, 0x54, 0xfd, 0x80, 0xd1, 0xc8, 0xae, 0xd1, 0xf6, 0x66, 0x4b, 0x32, 0xa0, 0x46, 0x96, 0x8c,
	0xa5, 0x9c, 0x8f, 0x93, 0xc1, 0x50, 0x2b, 0x99, 0x30, 0x45, 0xd2, 0x24, 0x65, 0x47, 0x3e, 0x19,
	0x48, 0x81, 0xa2, 0x2f, 0x90, 0x6b, 0x8f, 0x7d, 0x86, 0xbe, 0x43, 0x81, 0xbe, 0x46, 0x81, 0x1e,
	0xfb, 0x02, 0xc5, 0x0e, 0x77, 0x65, 0xd9, 0x48, 0x8a, 0xb6, 0x07, 0xa3, 0x17, 0x61, 0x7e, 0x33,
	0xb3, 0x33, 0xbf, 0xf9, 0xd8, 0x15, 0xe1, 0xfe, 0xab, 0x51, 0x1a, 0x9c, 0xb3, 0xe3, 0x91, 0x97,
	0x7b, 0x9b, 0x49, 0x1a, 0xe7, 0x31, 0x29, 0x17, 0x2a, 0x67, 0x1b, 0xa0, 0x15, 0x87, 0xb3, 0x69,
	0xd4, 0x66, 0x99, 0x4f, 0x08, 0x68, 0x91, 0x37, 0x65, 0xb6, 0x52, 0x57, 0x1a, 0x15, 0x8a, 0x32,
	0xd7, 0xe5, 0xf3, 0x84, 0xd9, 0xa5, 0xba, 0xd2, 0xd0, 0x29, 0xca, 0x4e, 0x1b, 0xca, 0xfb, 0x41,
	0x98, 0xb3, 0x94, 0xac, 0x42, 0x29, 0x4e, 0x84, 0x7f, 0x29, 0x4e, 0xc8, 0x03, 0x28, 0xfb, 0x18,
	0x0f, 0xfd, 0x2b, 0x54, 0x20, 0x1e, 0xc5, 0x4b, 0x27, 0x99, 0xad, 0xd6, 0x55, 0x1e, 0x99, 0xcb,
	0xce, 0xf7, 0x0a, 0x18, 0x2d, 0xf7, 0xa9, 0x9b, 0x30, 0x9f, 0x7c, 0x00, 0x95, 0x11, 0x0b, 0x83,
	0x69, 0x90, 0xb3, 0x54, 0x84, 0xbb, 0x56, 0x10, 0x1b, 0x8c, 0x68, 0x16, 0x86, 0x59, 0x9e, 0x8a,
	0xb0, 0x12, 0xf2, 0x7c, 0x27, 0xcc, 0x1b, 0xb1, 0xd4, 0x56, 0xeb, 0x4a, 0xc3, 0xa4, 0x02, 0x91,
	0x75, 0xd0, 0xcf, 0x66, 0x71, 0xce, 0x6c, 0x0d, 0xfd, 0x0b, 0xc0, 0xbd, 0x59, 0xe6, 0x7b, 0x09,
	0xb3, 0xf5, 0x82, 0x5d, 0x81, 0x1c, 0x0f, 0xcc, 0xfd, 0x20, 0x64, 0xc8, 0x84, 0x80, 0x96, 0x78,
	0xf9, 0x89, 0xec, 0x01, 0x97, 0xf9, 0xb9, 0x71, 0x9c, 0x4e, 0xbd, 0x5c, 0x56, 0x55, 0x20, 0xf2,
	0x09, 0x18, 0x7e, 0x76, 0x9e, 0x25, 0xcc, 0xc7, 0xf4, 0xd5, 0xe6, 0xda, 0x66, 0xd1, 0xd7, 0x4d,
	0x51, 0x17, 0x95, 0x76, 0x67, 0x03, 0xc0, 0xcd, 0xd3, 0x20, 0x9a, 0xf4, 0x82, 0x2c, 0x27, 0x16,
	0xa8, 0xbc, 0x18, 0x05, 0xbb, 0xc1, 0x45, 0xa7, 0x09, 0xe6, 0x13, 0x36, 0x7f, 0xea, 0x85, 0x33,
	0xc6, 0xad, 0xa7, 0x6c, 0x2e, 0x18, 0x70, 0x91, 0x97, 0x73, 0xce, 0x4d, 0x22, 0x7f, 0x01, 0x9c,
	0x2f, 0xa0, 0x26, 0xcf, 0x60, 0xd4, 0x3a, 0x94, 0x4e, 0xcf, 0x31, 0x68, 0xb5, 0x69, 0x49, 0x26,
	0xd2, 0x83, 0x96, 0x4e, 0xcf, 0x9d, 0x37, 0x0a, 0x98, 0x74, 0x3a, 0x49, 0xbb, 0xd1, 0x38, 0xe6,
	0x55, 0x65, 0xfe, 0x09, 0x5b, 0xcc, 0x5b, 0xa0, 0x77, 0x56, 0xbb, 0x0e, 0x7a, 0x8a, 0xad, 0x51,
	0x0b, 0x12, 0x08, 0x48, 0x03, 0x34, 0x3f, 0x8e, 0xc6, 0xd8, 0xe8, 0x6a, 0x73, 0xfd, 0x76, 0x5a,
	0x4e, 0x8c, 0xa2, 0x07, 0x79, 0x08, 0x66, 0x12, 0xce, 0x26, 0x41, 0x14, 0x27, 0xa2, 0xff, 0x0b,
	0xec, 0xfc, 0xae, 0x40, 0x95, 0x32, 0x6f, 0x44, 0xd9, 0xd9, 0x8c, 0x65, 0x39, 0xf9, 0x1c, 0xcc,
	0x71, 0x10, 0x32, 0x6c, 0xad, 0x82, 0x91, 0x17, 0x05, 0xc9, 0x49, 0xd1, 0x85, 0x07, 0x69, 0x02,
	0x14, 0x7b, 0x36, 0x62, 0x99, 0x6f, 0x97, 0xb0, 0x01, 0x64, 0x31, 0x8a, 0xc5, 0x7e, 0xd3, 0x25,
	0x2f, 0xb2, 0x21, 0xcf, 0x84, 0x41, 0x96, 0x8b, 0xbd, 0x5c, 0xd2, 0x90, 0x47, 0x50, 0x1e, 0xe3,
	0x8e, 0xdb, 0x1a, 0xc6, 0x5b, 0x5d, 0xca, 0x9f, 0xb3, 0x94, 0x0a, 0x2b, 0x79, 0x0f, 0x8c, 0x71,
	0xea, 0x4d, 0x8e, 0x83, 0x11, 0x16, 0xa5, 0xd3, 0x32, 0x87, 0xdd, 0x11, 0x79, 0x1f, 0x4c, 0x34,
	0xf8, 0x51, 0x6e, 0x97, 0xd1, 0x82, 0x8e, 0xad, 0x28, 0x77, 0x7e, 0x56, 0xe0, 0x9e, 0xeb, 0x4d,
	0x93, 0x90, 0xdd, 0x5d, 0xbd, 0x4b, 0x3c, 0xd5, 0x77, 0xf2, 0xd4, 0x6e, 0xf0, 0xc4, 0xf7, 0x20,
	0x8d, 0x2f, 0x44, 0x61, 0x28, 0x3b, 0x1f, 0x42, 0xa5, 0xed, 0xe5, 0x1e, 0x65, 0x49, 0x38, 0xe7,
	0x0e, 0xfc, 0x51, 0x41, 0xca, 0x35, 0x8a, 0xb2, 0xf3, 0x8b, 0x02, 0xda, 0xf3, 0x56, 0x1c, 0xf2,
	0x5b, 0xeb, 0xc7, 0xe1, 0xd2, 0x83, 0x22, 0xe1, 0x22, 0x6e, 0xe9, 0x3a, 0xae, 0xbc, 0xe3, 0x53,
	0x2f, 0xc1, 0x61, 0x98, 0x54, 0x42, 0xbe, 0x77, 0x19, 0x66, 0xd1, 0x70, 0x48, 0x05, 0xe0, 0xfe,
	0xc1, 0x56, 0x13, 0xf5, 0x7a, 0x5d, 0xe5, 0xac, 0x05, 0x44, 0xcb, 0xce, 0x36, 0x5a, 0xca, 0x75,
	0xb5, 0xa1, 0x52, 0x09, 0xb9, 0x65, 0x2c, 0xce, 0x18, 0x75, 0xb5, 0x51, 0xa2, 0x12, 0xa2, 0x45,
	0x9c, 0x31, 0xeb, 0x6a, 0x43, 0xa1, 0x12, 0x3a, 0x2f, 0xc0, 0x78, 0x4e, 0xe3, 0x0b, 0x97, 0xe1,
	0xad, 0xcd, 0xbd, 0x09, 0x16, 0xa3, 0x53, 0x2e, 0xe2, 0x95, 0x88, 0x67, 0xd1, 0x48, 0x54, 0x52,
	0x00, 0xf2, 0x08, 0x0b, 0x9f, 0x4d, 0xa3, 0xe2, 0xbd, 0xab, 0x36, 0x6b, 0x72, 0x36, 0xbc, 0x2f,
	0x54, 0x1a, 0x9d, 0x10, 0xd6, 0x0e, 0xf1, 0x02, 0x5c, 0x37, 0xd4, 0x06, 0x83, 0xa5, 0xa9, 0x1f,
	0x8f, 0x98, 0x48, 0x23, 0x21, 0xbe, 0x5d, 0x69, 0x3a, 0xcd, 0x26, 0xf2, 0x56, 0x16, 0x88, 0x7c,
	0x0c, 0xe5, 0x34, 0xbe, 0xc8, 0x58, 0x7e, 0xfb, 0x09, 0x12, 0xac, 0xa9, 0x30, 0x3b, 0x3f, 0x29,
	0xb0, 0xe6, 0x06, 0x97, 0xec, 0x80, 0xf1, 0x64, 0xff, 0xe1, 0xb5, 0x73, 0xbe, 0x86, 0x7b, 0xd7,
	0x44, 0xc5, 0x9a, 0xe1, 0xbe, 0x70, 0x8a, 0xaa, 0xd8, 0x97, 0x75, 0xd0, 0xa3, 0x97, 0xf3, 0xbc,
	0x78, 0x12, 0x55, 0x5a, 0x00, 0xe7, 0x12, 0xfe, 0x57, 0xb4, 0xf4, 0x66, 0x80, 0x7f, 0xde, 0xd6,
	0xc7, 0x60, 0x66, 0xc1, 0x25, 0x9b, 0xb2, 0xdc, 0x13, 0x8d, 0xfd, 0xbf, 0xac, 0xf4, 0x46, 0x68,
	0xba, 0x70, 0x73, 0x36, 0xc0, 0x3c, 0xf4, 0x26, 0x8c, 0x0f, 0xf3, 0xad, 0x17, 0xe3, 0x8d, 0x02,
	0xb5, 0x67, 0x69, 0x90, 0xdf, 0xe1, 0xa5, 0xff, 0x88, 0xff, 0x99, 0x4d, 0x98, 0x58, 0xc3, 0x45,
	0x74, 0x49, 0x93, 0xa2, 0xd5, 0xf9, 0x51, 0x01, 0x52, 0x74, 0xed, 0x8e, 0xe9, 0xfd, 0xed, 0xdd,
	0xad, 0x01, 0x08, 0x6a, 0x49, 0x38, 0x77, 0xda, 0x60, 0xdd, 0xa0, 0xfb, 0xaf, 0x26, 0xec, 0xfc,
	0xca, 0xdf, 0xa9, 0x83, 0x6c, 0xf2, 0xd6, 0xaf, 0x9e, 0xcf, 0x40, 0x7f, 0x35, 0x0e, 0xbd, 0xe2,
	0xcc, 0xea, 0xf5, 0xec, 0xf9, 0x01, 0xfc, 0xd9, 0x0f, 0xbd, 0x09, 0x2d, 0x7c, 0x78, 0x00, 0x4c,
	0x5c, 0x2c, 0x38, 0xca, 0x5c, 0x17, 0x44, 0xe3, 0x58, 0x7c, 0x7f, 0xa0, 0xbc, 0x54, 0xae, 0xfe,
	0xd7, 0xe5, 0x7e, 0x09, 0xa6, 0xcc, 0x41, 0x0c, 0x50, 0x3b, 0x03, 0xd7, 0x5a, 0x29, 0x84, 0x3d,
	0x4b, 0x21, 0x35, 0x30, 0x5b, 0x83, 0xfe, 0xb0, 0xdb, 0x3f, 0xea, 0x58, 0x25, 0x52, 0x01, 0xcd,
	0x7d, 0xd1, 0x6f, 0x59, 0xbf, 0x19, 0x9f, 0xfe, 0xa1, 0x80, 0xe1, 0x26, 0x67, 0xc3, 0x79, 0xc2,
	0x48, 0x15, 0x8c, 0xa3, 0xfe, 0x93, 0xfe, 0xe0, 0x59, 0xdf, 0x5a, 0x21, 0x26, 0x68, 0x7b, 0x83,
	0x41, 0xcf, 0x52, 0x48, 0x05, 0xf4, 0x6e, 0x7f, 0xf8, 0x78, 0x07, 0x0f, 0x72, 0x71, 0xab, 0x69,
	0xa9, 0x42, 0xdc, 0xd9, 0xb6, 0x34, 0x02, 0x50, 0xe6, 0x0e, 0xcd, 0xaf, 0x2c, 0x9d, 0xab, 0xf7,
	0x7b, 0x83, 0xdd, 0xa1, 0x55, 0xe6, 0xea, 0xf6, 0xe0, 0x68, 0xaf, 0xd7, 0xb1, 0x0c, 0x1e, 0xad,
	0xe5, 0x0e, 0xa9, 0x55, 0xe1, 0x0e, 0xed, 0x4e, 0x6b, 0x67, 0xdb, 0x02, 0x74, 0xe8, 0xb4, 0xf8,
	0xb9, 0x2a, 0x01, 0xd0, 0xda, 0xbb, 0xc3, 0x8e, 0xf5, 0xfa, 0x4a, 0x23, 0xf7, 0xa1, 0x3a, 0xec,
	0x1e, 0x74, 0x8e, 0x0f, 0xba, 0xbd, 0x5e, 0xd7, 0xb5, 0x5e, 0x5f, 0x99, 0xe4, 0x01, 0x58, 0x5c,
	0xe5, 0x0e, 0x77, 0x0f, 0x0e, 0xa5, 0xfe, 0xbb, 0xab, 0xda, 0x92, 0x6b, 0x8b, 0x0e, 0xb8, 0xca,
	0xba, 0xed, 0x2a, 0xf4, 0xeb, 0x3c, 0xc3, 0xb7, 0xee, 0xa0, 0x6f, 0xfd, 0x70, 0x65, 0x37, 0xbf,
	0x01, 0xf5, 0xf0, 0x24, 0x20, 0x5b, 0x60, 0x64, 0x2c, 0x1a, 0xf1, 0xbb, 0x5b, 0x5b, 0x9e, 0xd6,
	0x43, 0x7b, 0xb1, 0xf5, 0xb7, 0x76, 0xc6, 0x59, 0x79, 0x59, 0xc6, 0xaf, 0xe1, 0xad, 0x3f, 0x03,
	0x00, 0x00, 0xff, 0xff, 0xb4, 0x71, 0x4d, 0x53, 0x22, 0x0b, 0x00, 0x00,
}
